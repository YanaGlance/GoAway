package dao;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.ITourRepository;
import dao.uow.IUnitOfWork;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import domain.model.Tour;

public class TourRepository extends RepositoryBase<Tour> implements ITourRepository{

    private PreparedStatement getName;
    private PreparedStatement getDateOfDeparture;
    private PreparedStatement getPrice;
    private PreparedStatement getCountryFrom;
    private PreparedStatement getCountryTo;
    private PreparedStatement getAmountOfDays;
   // private PreparedStatement getEnumDictionary;

	public TourRepository(Connection connection,
			IMapResultSetIntoEntity<Tour> mapper, IUnitOfWork uow) {
		super(connection, mapper, uow);

		try{
		    getName = connection.prepareStatement(getNameSql());
		    getDateOfDeparture = connection.prepareStatement(getDateOfDepartureSql());
		    getPrice = connection.prepareStatement(getPriceSql());
		    getCountryFrom = connection.prepareStatement(getCountryForm());
		    getCountryTo = connection.prepareStatement(getCountryToSql());
		    getAmountOfDays = connection.prepareStatement(getAmountOfDaysSql());
		    //getEnumDictionary = connection.prepareStatement(getEnumDictionarySql());
        }catch(SQLException e){
		    e.printStackTrace();
        }
	}

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE tour("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(20)," 
				+ "dateOfDeparture date," 
				+ "price double,"
				+ "countryFrom varchar(20),"
				+ "countryTo varchar(20)," 
				+ "amountOfDays int,"
	            //+ "enum_id bigint,"
               // + "foreign key (enum_id) references enumDictionary(id))"
                + ";";
    }

    @Override
    protected String tableName() {
        return "tour";
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO tour("
                + "name, dateOfDeparture, price, countryFrom, countryTo, amountOfDays"
                + ") VALUES (?,?,?,?,?,?)";
    }

    @Override
    protected String updateSql() {
        return "UPDATE TOUR SET (name, dateOfDeparture, price, countryFrom, countryTo, amountOfDays)= (?,?,?,?,?,?) WHERE id = ?";
    }
    
    protected String getNameSql(){return "SELECT * FROM tour where name = ?";}
	protected String getDateOfDepartureSql(){return "SELECT * FROM tour where dateOfDeparture=?";}
	protected String getPriceSql(){return "SELECT * FROM tour where price = ?";}
	protected String getCountryForm(){return "SELECT * FROM tour where countryFrom=?";}
	protected String getCountryToSql(){return "SELECT * FROM tour where countryTo = ?";}
	protected String getAmountOfDaysSql(){return "SELECT * FROM tour where amountOfDays=?";}
	//protected String getEnumDictionarySql(){return "SELECT * FROM tour where enum_id=?";}

    @Override
    protected void setUpdate(Tour entity) throws SQLException {
        update.setString(1, entity.getName());
        update.setDate(2, entity.getDateOfDeparture());
        update.setDouble(3, entity.getPrice());
        update.setString(4, entity.getCountryFrom());
        update.setString(5, entity.getCountryTo());
        update.setString(6, entity.getAmountOfDays());
        //update.setInt(7, entity.getEnumDictionaryId());
    }

    @Override
    protected void setInsert(Tour entity) throws SQLException {
        insert.setString(1, entity.getName());
        insert.setDate(2, entity.getDateOfDeparture());
        insert.setDouble(3, entity.getPrice());
        insert.setString(4, entity.getCountryFrom());
        insert.setString(5, entity.getCountryTo());
        insert.setString(6, entity.getAmountOfDays());
        //insert.setInt(7, entity.getEnumDictionaryId());
	}
    
    public List<Tour> withName(String name) {
   	 List<Tour> tour = new ArrayList<Tour>();
        try{
            getName.setString(1,name);
            ResultSet resultSet = getName.executeQuery();
            while(resultSet.next()){
                tour.add(mapper.map(resultSet));
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return tour;
   }


   public List<Tour> withDateOfDeparture(java.sql.Date dateOfDeparture) {
        List<Tour> dateOfDeparture1 = new ArrayList<Tour>();
        try {
            getDateOfDeparture.setDate(1, (Date) dateOfDeparture1);
            ResultSet resultSet = getDateOfDeparture.executeQuery();
            while (resultSet.next()) {
                dateOfDeparture1.add(mapper.map(resultSet));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dateOfDeparture1;
}
   
    public List<Tour> withCoutryFrom(String countryFrom) {
  	 List<Tour> tour = new ArrayList<Tour>();
       try{
           getCountryFrom.setString(1,countryFrom);
           ResultSet resultSet = getCountryFrom.executeQuery();
           while(resultSet.next()){
               tour.add(mapper.map(resultSet));
           }
       }catch (SQLException e){
           e.printStackTrace();
       }
       return tour;
  }
   
   public List<Tour> withAmountOfDays(int amountOfDays) {
	  	 List<Tour> tour = new ArrayList<Tour>();
	       try{
	           getCountryFrom.setInt(1,amountOfDays);
	           ResultSet resultSet = getAmountOfDays.executeQuery();
	           while(resultSet.next()){
	               tour.add(mapper.map(resultSet));
	           }
	       }catch (SQLException e){
	           e.printStackTrace();
	       }
	       return tour;
	  }

public List<Tour> withPrice(double price) {
 	 List<Tour> tour = new ArrayList<Tour>();
     try{
         getPrice.setDouble(1,price);
         ResultSet resultSet = getPrice.executeQuery();
         while(resultSet.next()){
             tour.add(mapper.map(resultSet));
         }
     }catch (SQLException e){
         e.printStackTrace();
     }
     return tour;
}

public List<Tour> withCoutryTo(String countryTo) {
	 List<Tour> tour = new ArrayList<Tour>();
     try{
         getCountryFrom.setString(1,countryTo);
         ResultSet resultSet = getCountryTo.executeQuery();
         while(resultSet.next()){
             tour.add(mapper.map(resultSet));
         }
     }catch (SQLException e){
         e.printStackTrace();
     }
     return tour;
}
}